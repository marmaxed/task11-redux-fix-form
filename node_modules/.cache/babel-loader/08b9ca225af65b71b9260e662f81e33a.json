{"ast":null,"code":"import { takeLatest, put, spawn, debounce, retry } from 'redux-saga/effects';\nimport { searchSkillsRequest, searchSkillsSuccess, searchSkillsFailure } from '../actions/actionCreators';\nimport { CHANGE_SEARCH_FIELD, SEARCH_SKILLS_REQUEST } from '../actions/actionTypes';\nimport { searchSkills } from '../api/index';\n\nfunction filterChangeSearchAction({\n  type,\n  payload\n}) {\n  return type === CHANGE_SEARCH_FIELD && payload.search.trim() !== '';\n} // worker\n\n\nfunction* handleChangeSearchSaga(action) {\n  yield put(searchSkillsRequest(action.payload.search));\n} // watcher\n\n\nfunction* watchChangeSearchSaga() {\n  yield debounce(100, filterChangeSearchAction, handleChangeSearchSaga);\n} // worker\n\n\nfunction* handleSearchSkillsSaga(action) {\n  try {\n    const retryCount = 3;\n    const retryDelay = 1 * 1000; // ms\n\n    const data = yield retry(retryCount, retryDelay, searchSkills, action.payload.search);\n    yield put(searchSkillsSuccess(data));\n  } catch (e) {\n    yield put(searchSkillsFailure(e.message));\n  }\n} // watcher\n\n\nfunction* watchSearchSkillsSaga() {\n  yield takeLatest(SEARCH_SKILLS_REQUEST, handleSearchSkillsSaga);\n}\n\nexport default function* saga() {\n  yield spawn(watchChangeSearchSaga);\n  yield spawn(watchSearchSkillsSaga);\n}","map":{"version":3,"sources":["/home/corvus/task11-redux-fix-form/src/sagas/index.js"],"names":["takeLatest","put","spawn","debounce","retry","searchSkillsRequest","searchSkillsSuccess","searchSkillsFailure","CHANGE_SEARCH_FIELD","SEARCH_SKILLS_REQUEST","searchSkills","filterChangeSearchAction","type","payload","search","trim","handleChangeSearchSaga","action","watchChangeSearchSaga","handleSearchSkillsSaga","retryCount","retryDelay","data","e","message","watchSearchSkillsSaga","saga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,QAA8E,2BAA9E;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,wBAA3D;AACA,SAASC,YAAT,QAA6B,cAA7B;;AAEA,SAASC,wBAAT,CAAkC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAlC,EAAmD;AAC/C,SAAOD,IAAI,KAAKJ,mBAAT,IAAgCK,OAAO,CAACC,MAAR,CAAeC,IAAf,OAA0B,EAAjE;AACH,C,CAED;;;AACA,UAAUC,sBAAV,CAAiCC,MAAjC,EAAyC;AACrC,QAAMhB,GAAG,CAACI,mBAAmB,CAACY,MAAM,CAACJ,OAAP,CAAeC,MAAhB,CAApB,CAAT;AACH,C,CAED;;;AACA,UAAUI,qBAAV,GAAkC;AAC9B,QAAMf,QAAQ,CAAC,GAAD,EAAMQ,wBAAN,EAAgCK,sBAAhC,CAAd;AACH,C,CAED;;;AACA,UAAUG,sBAAV,CAAiCF,MAAjC,EAAyC;AACrC,MAAI;AACA,UAAMG,UAAU,GAAG,CAAnB;AACA,UAAMC,UAAU,GAAG,IAAI,IAAvB,CAFA,CAE6B;;AAC7B,UAAMC,IAAI,GAAG,MAAMlB,KAAK,CAACgB,UAAD,EAAaC,UAAb,EAAyBX,YAAzB,EAAuCO,MAAM,CAACJ,OAAP,CAAeC,MAAtD,CAAxB;AACA,UAAMb,GAAG,CAACK,mBAAmB,CAACgB,IAAD,CAApB,CAAT;AACH,GALD,CAKE,OAAOC,CAAP,EAAU;AACR,UAAMtB,GAAG,CAACM,mBAAmB,CAACgB,CAAC,CAACC,OAAH,CAApB,CAAT;AACH;AACJ,C,CAED;;;AACA,UAAUC,qBAAV,GAAkC;AAC9B,QAAMzB,UAAU,CAACS,qBAAD,EAAwBU,sBAAxB,CAAhB;AACH;;AAED,eAAe,UAAUO,IAAV,GAAiB;AAC5B,QAAMxB,KAAK,CAACgB,qBAAD,CAAX;AACA,QAAMhB,KAAK,CAACuB,qBAAD,CAAX;AACH","sourcesContent":["import { takeLatest, put, spawn, debounce, retry } from 'redux-saga/effects';\nimport { searchSkillsRequest, searchSkillsSuccess, searchSkillsFailure } from '../actions/actionCreators';\nimport { CHANGE_SEARCH_FIELD, SEARCH_SKILLS_REQUEST } from '../actions/actionTypes';\nimport { searchSkills } from '../api/index';\n\nfunction filterChangeSearchAction({type, payload}) {\n    return type === CHANGE_SEARCH_FIELD && payload.search.trim() !== ''\n}\n\n// worker\nfunction *handleChangeSearchSaga(action) {\n    yield put(searchSkillsRequest(action.payload.search));\n}\n\n// watcher\nfunction* watchChangeSearchSaga() {\n    yield debounce(100, filterChangeSearchAction, handleChangeSearchSaga);\n}\n\n// worker\nfunction* handleSearchSkillsSaga(action) {\n    try {\n        const retryCount = 3;\n        const retryDelay = 1 * 1000; // ms\n        const data = yield retry(retryCount, retryDelay, searchSkills, action.payload.search);\n        yield put(searchSkillsSuccess(data));\n    } catch (e) {\n        yield put(searchSkillsFailure(e.message));\n    }\n}\n\n// watcher\nfunction* watchSearchSkillsSaga() {\n    yield takeLatest(SEARCH_SKILLS_REQUEST, handleSearchSkillsSaga);\n}\n\nexport default function* saga() {\n    yield spawn(watchChangeSearchSaga);\n    yield spawn(watchSearchSkillsSaga)\n}"]},"metadata":{},"sourceType":"module"}